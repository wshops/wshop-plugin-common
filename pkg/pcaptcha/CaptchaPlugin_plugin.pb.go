//go:build tinygo.wasm

// Code generated by protoc-gen-go-plugin. DO NOT EDIT.
// versions:
// 	protoc-gen-go-plugin v0.1.0
// 	protoc               v3.21.9
// source: CaptchaPlugin.proto

package pcaptcha

import (
	context "context"
	emptypb "github.com/knqyf263/go-plugin/types/known/emptypb"
	wasm "github.com/knqyf263/go-plugin/wasm"
	wpc "github.com/wshops/wshop-plugin-common/pkg/wpc"
)

const CaptchaPluginAPIVersion = 1

//export captcha_api_version
func _captcha_api_version() uint64 {
	return CaptchaPluginAPIVersion
}

var captcha Captcha

func RegisterCaptcha(p Captcha) {
	captcha = p
}

//export captcha_get_plugin_info
func _captcha_get_plugin_info(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	var req emptypb.Empty
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := captcha.GetPluginInfo(context.Background(), req)
	if err != nil {
		return 0
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//export captcha_verify_captcha
func _captcha_verify_captcha(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	var req VerifyCaptchaRequest
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := captcha.VerifyCaptcha(context.Background(), req)
	if err != nil {
		return 0
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//export captcha_get_custom_html_input_field
func _captcha_get_custom_html_input_field(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	var req emptypb.Empty
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := captcha.GetCustomHtmlInputField(context.Background(), req)
	if err != nil {
		return 0
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//export captcha_get_custom_html_head
func _captcha_get_custom_html_head(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	var req emptypb.Empty
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := captcha.GetCustomHtmlHead(context.Background(), req)
	if err != nil {
		return 0
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//export captcha_get_custom_html_body_end
func _captcha_get_custom_html_body_end(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	var req emptypb.Empty
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := captcha.GetCustomHtmlBodyEnd(context.Background(), req)
	if err != nil {
		return 0
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

type hostFunctions struct{}

func NewHostFunctions() HostFunctions {
	return hostFunctions{}
}

//go:wasm-module env
//export log_info
func _log_info(ptr uint32, size uint32) uint64

func (h hostFunctions) LogInfo(ctx context.Context, request wpc.HFuncLogRequest) (response emptypb.Empty, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _log_info(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export log_error
func _log_error(ptr uint32, size uint32) uint64

func (h hostFunctions) LogError(ctx context.Context, request wpc.HFuncLogRequest) (response emptypb.Empty, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _log_error(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export log_debug
func _log_debug(ptr uint32, size uint32) uint64

func (h hostFunctions) LogDebug(ctx context.Context, request wpc.HFuncLogRequest) (response emptypb.Empty, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _log_debug(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export log_warn
func _log_warn(ptr uint32, size uint32) uint64

func (h hostFunctions) LogWarn(ctx context.Context, request wpc.HFuncLogRequest) (response emptypb.Empty, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _log_warn(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export log_fatal
func _log_fatal(ptr uint32, size uint32) uint64

func (h hostFunctions) LogFatal(ctx context.Context, request wpc.HFuncLogRequest) (response emptypb.Empty, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _log_fatal(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export log_panic
func _log_panic(ptr uint32, size uint32) uint64

func (h hostFunctions) LogPanic(ctx context.Context, request wpc.HFuncLogRequest) (response emptypb.Empty, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _log_panic(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export http_request
func _http_request(ptr uint32, size uint32) uint64

func (h hostFunctions) HttpRequest(ctx context.Context, request wpc.HFuncHttpRequest) (response wpc.HFuncHttpResponse, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _http_request(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}
